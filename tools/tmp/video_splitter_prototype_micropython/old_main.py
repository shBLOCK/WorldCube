def init_lcd():
    rst = Pin(4, Pin.OUT, value=0)
    cs = Pin(3, Pin.OUT, value=1)
    sck = Pin(2, Pin.OUT, value=0)
    mosi = Pin(1, Pin.OUT)

    def spi_send(head, data):
        cs(0)
        mosi(head)
        sck(1)
        sck(0)
        for _ in range(8):
            mosi(data & 0x80)
            sck(1)
            sck(0)
            data <<= 1
        cs(1)

    def cmd(cmd, *data):
        spi_send(0, cmd)
        for byte in data:
            spi_send(1, byte)

    rst(0)
    sleep_ms(10)
    rst(1)
    sleep_ms(10)

    #https://github.com/ironblock/ST7701S-SPI-Driver/blob/master/src/sequence_tdo.rs

    # --- Set Command2 BK0 ---
    cmd(0xFF, 0x77, 0x01, 0x00, 0x00, 0x10)

    # Display line setting (LNESET)
    cmd(0xC0, 0x3B, 0x00)

    # Porch control (PORCTRL) - values depend on mode
    cmd(0xC1, 2, 2)

    # Inversion selection (INVSET)
    cmd(0xC2, 0x00, 0x02)  # One-dot, RTNI=2

    cmd(0xC3, 0b0_000_0_0_0_0, 2, 2)
    cmd(0xCC, 0x10)

    cmd(0xCD, 0x08)

    # Positive Gamma (PVGAMCTRL)
    cmd(0xB0, 0x02, 0x13, 0x1B, 0x0D, 0x10, 0x05, 0x08, 0x07, 0x07, 0x24, 0x04, 0x11, 0x0E, 0x2C, 0x33, 0x1D)

    # Negative Gamma (NVGAMCTRL)
    cmd(0xB1, 0xB1, 0x05, 0x13, 0x1B, 0x0D, 0x11, 0x05, 0x08, 0x07, 0x07, 0x24, 0x04, 0x11, 0x0E, 0x2C, 0x33, 0x1D)

    # --- Set Command2 BK1 ---
    cmd(0xFF, 0x77, 0x01, 0x00, 0x00, 0x11)

    cmd(0xB0, 0x5D)  # Vop amplitude
    cmd(0xB1, 0x43)  # VCOM amplitude
    cmd(0xB2, 0x81)  # VGH
    cmd(0xB3, 0x80)  # TESTCMD
    cmd(0xB5, 0x43 | 0x40)  # VGL | 0x40
    cmd(0xB7, 0x80 | 0x04 | 0x01)  # GammaOP=Middle | SrcIn=Min | SrcOut=Min = 0x85
    cmd(0xB8, 0x20 | 0x00)  # AVDD=6.6V, AVCL=–4.4V = 0x20

    # Source Pre-drive Timing
    cmd(0xC1, 0x70 | 0x08)  # SPD1
    cmd(0xC2, 0x70 | 0x08)  # SPD2

    # MIPI Setup
    cmd(0xD0, 0x88)

    # Color / sharpness / enhancement registers (E0+)
    cmd(0xE0, 0x00, 0x00, 0x02)
    cmd(0xE1, 0x03, 0xA0, 0x00, 0x00, 0x04, 0xA0, 0x00, 0x00, 0x00, 0x20, 0x20)
    cmd(0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
    cmd(0xE3, 0x00, 0x00, 0x11, 0x00)
    cmd(0xE4, 0x22, 0x00)
    cmd(0xE5, 0x05, 0xEC, 0xA0, 0xA0, 0x07, 0xEE, 0xA0, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
    cmd(0xE6, 0x00, 0x00, 0x11, 0x00)
    cmd(0xE7, 0x22, 0x00)
    cmd(0xE8, 0x06, 0xED, 0xA0, 0xA0, 0x08, 0xEF, 0xA0, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
    cmd(0xEB, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00)
    cmd(0xED, 0xFF, 0xFF, 0xFF, 0xBA, 0x0A, 0xBF, 0x45, 0xFF, 0xFF, 0x54, 0xFB, 0xA0, 0xAB, 0xFF, 0xFF, 0xFF)
    cmd(0xEF, 0x10, 0x0D, 0x04, 0x08, 0x3F, 0x1F)

    # --- Back to BK1 briefly (assume typo in Rust code) ---
    cmd(0xFF, 0x77, 0x01, 0x00, 0x00, 0x13)
    cmd(0xEF, 0x08)

    cmd(0xFF, 0x77, 0x01, 0x00, 0x00, 0x00) # BK disable

    # Exit Sleep
    cmd(0x11, 0x11)
    sleep(0.120)

    # Display ON
    cmd(0x29, 0x29)

    # MADCTL – Scan direction + Color Order (RGB)
    cmd(0x36, 0x00)

    # Interface Pixel Format (COLMOD) = RGB888
    cmd(0x3A, 0x70)


def init_hdmi_():
    rst = Pin(44, Pin.OUT)
    i2c = SoftI2C(scl=Pin(7), sda=Pin(8), freq=100_000)
    print("i2c.scan():", i2c.scan())

    def wr(map_addr: int, reg: int, val: int):
        """Write one byte to a register."""
        i2c.writeto_mem(map_addr >> 1, reg, bytes([val & 0xFF]))

    def burst_wr(map_addr: int, start_reg: int, data: bytes, chunk=16):
        """Write an arbitrary‑length byte‑array in small chunks."""
        for off in range(0, len(data), chunk):
            i2c.writeto_mem(map_addr,
                            start_reg + off,
                            data[off: off + chunk])

    wr(0x98, 0xFF, 0x80)  # I2C reset
    sleep_ms(10)
    wr(0x98, 0xF4, 0x80)  # CEC
    wr(0x98, 0xF5, 0x7C)  # INFOFRAME
    wr(0x98, 0xF8, 0x4C)  # DPLL
    wr(0x98, 0xF9, 0x64)  # KSV
    wr(0x98, 0xFA, 0x6C)  # EDID
    wr(0x98, 0xFB, 0x68)  # HDMI
    wr(0x98, 0xFD, 0x44)  # CP
    wr(0x98, 0x01, 0x06)  # Prim_Mode =110b HDMI-GR
    wr(0x98, 0x02, 0xF5)  # Auto CSC, YCrCb out, Set op_656 bit
    wr(0x98, 0x03, 0x42)  # 36 bit SDR 444 Mode 0
    wr(0x98, 0x05, 0x28)  # AV Codes Off
    wr(0x98, 0x0B, 0x44)  # Power up part
    wr(0x98, 0x0C, 0x42)  # Power up part
    wr(0x98, 0x14, 0x7F)  # Max Drive Strength
    wr(0x98, 0x15, 0x80)  # Disable Tristate of Pins
    wr(0x98, 0x19, 0x83)  # LLC DLL phase
    wr(0x98, 0x33, 0x40)  # LLC DLL enable
    wr(0x44, 0xBA, 0x01)  # Set HDMI FreeRun
    wr(0x64, 0x40, 0x81)  # Disable HDCP 1.1 features
    wr(0x68, 0x9B, 0x03)  # ADI recommended setting
    wr(0x68, 0x00, 0x08)  # Set HDMI Input Port A (BG_MEAS_PORT_SEL = 001b)
    wr(0x68, 0x02, 0x03)  # Enable Ports A & B in background mode
    wr(0x68, 0x83, 0xFC)  # Enable clock terminators for port A & B
    wr(0x68, 0x6F, 0x0C)  # ADI recommended setting
    wr(0x68, 0x85, 0x1F)  # ADI recommended setting
    wr(0x68, 0x87, 0x70)  # ADI recommended setting
    wr(0x68, 0x8D, 0x04)  # LFG Port A
    wr(0x68, 0x8E, 0x1E)  # HFG Port A
    wr(0x68, 0x1A, 0x8A)  # unmute audio
    wr(0x68, 0x57, 0xDA)  # ADI recommended setting
    wr(0x68, 0x58, 0x01)  # ADI recommended setting
    wr(0x68, 0x75, 0x10)  # DDC drive strength
    wr(0x68, 0x90, 0x04)  # LFG Port B
    wr(0x68, 0x91, 0x1E)  # HFG Port B
    wr(0x72, 0x01, 0x00)  # Set N Value(6144)
    wr(0x72, 0x02, 0x18)  # Set N Value(6144)
    wr(0x72, 0x03, 0x00)  # Set N Value(6144)
    wr(0x72, 0x15, 0x00)  # Input 444 (RGB or YCrCb) with Separate Syncs, 44.1kHz fs
    wr(0x72, 0x16, 0x60)  # Output format 444, 36-bit input
    wr(0x72, 0x18, 0x46)  # CSC disabled
    wr(0x72, 0x40, 0x80)  # General Control packet enable
    wr(0x72, 0x41, 0x10)  # Power down control
    wr(0x72, 0x48, 0x08)  # Data right justified
    wr(0x72, 0x49, 0x00)  # No truncation
    wr(0x72, 0x4C, 0x00)  # 12 bit Output
    wr(0x72, 0x55, 0x40)  # Set YCrCb 444 in AVinfo Frame
    wr(0x72, 0x56, 0x08)  # Set active format Aspect
    wr(0x72, 0x96, 0x20)  # HPD Interrupt clear
    wr(0x72, 0x98, 0x03)  # ADI Recommended Write
    wr(0x72, 0x99, 0x02)  # ADI Recommended Write
    wr(0x72, 0x9C, 0x30)  # PLL Filter R1 Value
    wr(0x72, 0x9D, 0x61)  # Set clock divide
    wr(0x72, 0xA2, 0xA4)  # ADI Recommended Write
    wr(0x72, 0xA3, 0xA4)  # ADI Recommended Write
    wr(0x72, 0xA5, 0x04)  # ADI Recommended Write
    wr(0x72, 0xAB, 0x40)  # ADI Recommended Write
    wr(0x72, 0xAF, 0x16)  # Set HDMI Mode
    wr(0x72, 0xBA, 0x60)  # No clock delay
    wr(0x72, 0xD1, 0xFF)  # ADI Recommended Write
    wr(0x72, 0xDE, 0xD8)  # ADI Recommended Write
    wr(0x72, 0xE4, 0x60)  # VCO_Swing_Reference_Voltage
    wr(0x72, 0xFA, 0x7D)  # Nbr of times to search for good phase